<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2018 SPARKL Limited

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  Generates a Javascript messages file from the input validation .xsl.
-->
<xsl:stylesheet
  version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  exclude-result-prefixes="xsi">

  <xsl:output method="text"/>

  <xsl:param name="filename" select="'undefined'"/>

  <xsl:variable name="apos">'</xsl:variable>

  <!--
    Wrap generated messages as Javascript object.
  -->
  <xsl:template match="/">
    <xsl:text>// Copyright (c) 2016 SPARKL Limited. All Rights Reserved.&#10;</xsl:text>
    <xsl:text>// Autogenerated by generate_messages.xsl.&#10;</xsl:text>
    <xsl:apply-templates
      select="//msg[@key]"/>
  </xsl:template>

  <!--
    Generate a message string property per generate-msg.
  -->
  <xsl:template match="msg[@key]">
    <xsl:text>I18n.en['</xsl:text>
    <xsl:value-of
      select="@key"/>
    <xsl:text>'] = '</xsl:text>

    <xsl:variable name="text">
      <xsl:apply-templates select="node()"/>
    </xsl:variable>

    <xsl:call-template name="escape">
      <xsl:with-param name="text"
        select="normalize-space($text)"/>
    </xsl:call-template>

    <xsl:text>';&#10;</xsl:text>
  </xsl:template>

  <!--
    Serialize element content.
  -->
  <xsl:template match="*">
    <xsl:text>&lt;</xsl:text>
    <xsl:value-of select="local-name()"/>
    <xsl:apply-templates select="@*"/>
    <xsl:choose>
      <xsl:when test="node()">
        <xsl:text>&gt;</xsl:text>
        <xsl:apply-templates select="node()"/>
        <xsl:text>&lt;/</xsl:text>
        <xsl:value-of select="local-name()"/>
        <xsl:text>&gt;</xsl:text>
      </xsl:when>

      <xsl:otherwise>
        <xsl:text>/&gt;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
    Serialise attributes on elements.
  -->
  <xsl:template match="@*">
    <xsl:text> </xsl:text>
    <xsl:value-of select="local-name()"/>
    <xsl:text>="</xsl:text>
    <xsl:value-of select="."/>
    <xsl:text>"</xsl:text>
  </xsl:template>

  <!--
    Escape all single quotes for Javascript.
  -->
  <xsl:template name="escape">
    <xsl:param name="text"/>

    <xsl:choose>
      <xsl:when test="contains($text,$apos)">
        <xsl:variable name="before"
          select="substring-before($text,$apos)"/>
        <xsl:variable name="after"
          select="substring-after($text,$apos)"/>

        <xsl:value-of select="$before"/>
        <xsl:text>\'</xsl:text>
        <xsl:call-template name="escape">
          <xsl:with-param name="text" select="$after"/>
        </xsl:call-template>
      </xsl:when>

      <xsl:otherwise>
        <xsl:value-of select="$text"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>
